Script started on Sat Aug 19 09:31:08 2023
[1m[7m%[27m[1m[0m                                                                                ]7;file://CIMS-TFAC-AP1/Users/cousot1/PB_Cousot_Cours/Cours_NYU/2024/fall-2023-CSCI-GA-3110-Honors-Programming-Languages/slides-sources_NYU-HPL_fall23/2023-09-22-06--grammar-parsing--OCaml-4-lexer/calculator-menhir[0m[27m[24m[J% [K[?2004hmmake[?2004l
/bin/rm -f calculator *.cmi *.cmo calculatorLEX.cmi calculatorLEX.cmo calculatorLEX.ml calculatorMENHIR.cmi calculatorMENHIR.cmo calculatorMENHIR.ml calculatorMENHIR.mli makefile~
ls
README				calculatorMENHIR.mly
calculator.ml			makefile
calculatorDeclarations.ml	typescript
calculatorLEX.mll
# Type declarations:
cat calculatorDeclarations.ml
(* File calculatorDeclarations.ml *)

type typeProg = unit ;;

type symbTable = (string * int) list ;;

let sb = ref([] : symbTable) ;;

let getvalue x =
   if (List.mem_assoc x !sb) then 
     (List.assoc x !sb)
   else
     0;;

let rec except x l = match l with
  []   -> []
| h::t -> if (h = x) then t
            else h::(except x t)

let setvalue x v =
  (print_string (x ^ " = "); print_int (v);
   print_string ";\n"; flush stdout;
   if (List.mem_assoc x !sb) then
     sb := (x, v) :: (except (x, (List.assoc x !sb)) !sb)
   else
     sb := (x, v) :: !sb 
  );;
ocamlc -c calculatorDeclarations.ml
# Lexer specification:
cat calculatorLEX.mll
(* File calculatorLEX.mll *)
{
open CalculatorMENHIR  (* Type token defined in CalculatorMENHIR.mli *)
exception Eof 
}
rule token = parse
    [' ' '\t'] { token lexbuf } (* skip blanks and tabs *)
  | ['\n' ]    { EOL }
  | (['a'-'z'] | ['A'-'Z'])(['a'-'z'] | ['A'-'Z'] | ['0'-'9'])* as idt
               { IDENT idt }
  | ['0'-'9']+ as num
               { NUM (int_of_string num) }
  | ';'        { SEMICOLON }
  | ':' '='    { ASSIGN }
  | '+'        { PLUS }
  | '-'        { MINUS }
  | '*'        { TIMES }
  | '/'        { DIV }
  | '('        { LPAREN }
  | ')'        { RPAREN }
  | eof        { raise Eof }
ocamllex calculatorLEX.mll
15 states, 342 transitions, table size 1458 bytes
ls
README				calculatorLEX.ml
calculator.ml			calculatorLEX.mll
calculatorDeclarations.cmi	calculatorMENHIR.mly
calculatorDeclarations.cmo	makefile
calculatorDeclarations.ml	typescript
# Parser specification:
cat calculatorMENHIR.mly
/* File calculatorMENHIR.mly */

%{ (* header *)
  
open CalculatorDeclarations

%} /* declarations */

%token EOL SEMICOLON ASSIGN PLUS /* lexer tokens */
%token MINUS TIMES DIV LPAREN RPAREN
%token < string > IDENT
%token < int > NUM
%start prog                   /* the entry point */
%type <CalculatorDeclarations.typeProg> prog  
/* the header is copied in calculatorMENHIR.ml but
not is calculatorMENHIR.mli where typeProg must be
qualified by the module where the type is declared */
%type <int> cmds
%type <int> cmd
%type <int> assign
%type <int> expr
%left PLUS MINUS          /* lowest precedence  */
%left TIMES DIV           /* medium precedence  */
%nonassoc UMINUS          /* highest precedence */

%% /* rules */

prog :
    cmds EOL  { print_int $1 ; print_newline(); flush stdout; () }
	
cmds :
    cmd SEMICOLON l = cmds   { l }
  | c = cmd                  { c }
  
cmd :
    c = assign  { c }
  | c = expr    { c }
  
assign :
    x = IDENT ASSIGN e = expr  { (setvalue x e) ; e }
	
expr :
    e1 = expr PLUS  e2 = expr     { e1 + e2 }
  | e1 = expr MINUS e2 = expr     { e1 - e2 }
  | e1 = expr TIMES e2 = expr     { e1 * e2 }
  | e1 = expr DIV   e2 = expr     { e1 / e2 }
  | MINUS e = expr %prec UMINUS   { - e }
  | LPAREN e = expr RPAREN        { e }
  | x = IDENT                     { (getvalue x) }
  | v = NUM                       { v }
  
%% (* trailer *)
# Parser creation:
menhir calculatorMENHIR.mly
ls
README				calculatorLEX.mll
calculator.ml			calculatorMENHIR.ml
calculatorDeclarations.cmi	calculatorMENHIR.mli
calculatorDeclarations.cmo	calculatorMENHIR.mly
calculatorDeclarations.ml	makefile
calculatorLEX.ml		typescript
# types of values returned by lexems:
cat calculatorMENHIR.mli

(* The type of tokens. *)

type token = 
  | TIMES
  | SEMICOLON
  | RPAREN
  | PLUS
  | NUM of ( int )
  | MINUS
  | LPAREN
  | IDENT of ( string )
  | EOL
  | DIV
  | ASSIGN

(* This exception is raised by the monolithic API functions. *)

exception Error

(* The monolithic API. *)

val prog: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (CalculatorDeclarations.typeProg)
# Compilation of the lexer and parser:
ocamlc -c calculatorMENHIR.mli
ocamlc -c calculatorLEX.ml
ocamlc -c calculatorMENHIR.ml
# Specification of the calculator:
cat calculator.ml 
(* File calculator.ml *)
open Parsing;;
try
  let lexbuf = Lexing.from_channel stdin in
  while true do
    try
      CalculatorMENHIR.prog CalculatorLEX.token lexbuf
    with Parse_error ->
      (print_string "Syntax error ..." ; print_newline ()) ;
    clear_parser ()
  done
with CalculatorLEX.Eof ->
  ()
;;
# compilation of the calculator:
ocamlc -c calculator.ml
# linking of the lexer, parser & calculator:
ocamlc -o calculator calculatorDeclarations.cmo calculatorLEX.cmo calculatorMENHIR.cmo calculator.cmo
ls
README				calculatorLEX.ml
calculator			calculatorLEX.mll
calculator.cmi			calculatorMENHIR.cmi
calculator.cmo			calculatorMENHIR.cmo
calculator.ml			calculatorMENHIR.ml
calculatorDeclarations.cmi	calculatorMENHIR.mli
calculatorDeclarations.cmo	calculatorMENHIR.mly
calculatorDeclarations.ml	makefile
calculatorLEX.cmi		typescript
calculatorLEX.cmo
# using the calculator:
X = 1;
Y = 2;
Z = 3;
13
X = 1;
Y = 2;
Fatal error: exception CalculatorMENHIR.MenhirBasics.Error
make: [all] Error 2 (ignored)
# the end.
[1m[7m%[27m[1m[0m                                                                                ]7;file://CIMS-TFAC-AP1/Users/cousot1/PB_Cousot_Cours/Cours_NYU/2024/fall-2023-CSCI-GA-3110-Honors-Programming-Languages/slides-sources_NYU-HPL_fall23/2023-09-22-06--grammar-parsing--OCaml-4-lexer/calculator-menhir[0m[27m[24m[J% [K[?2004h[?2004l

Saving session...
...copying shared history...
...saving history...truncating history files...
...completed.

Script done on Sat Aug 19 09:31:16 2023
